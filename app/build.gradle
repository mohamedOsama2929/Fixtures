apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion(Android.compileSdkVersion)
    defaultConfig {
        applicationId = Android.applicationId
        minSdkVersion(Android.minSdkVersion)
        targetSdkVersion(Android.targetSdkVersion)
        versionCode = Android.versionCode
        versionName = Android.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(":core")
    api project(':fixtures')

    //kotlin
    implementation(Kotlin.kotlin_stdlib_jdk)
    implementation(Kotlin.kotlin_stdlib)
    implementation(Kotlin.core_ktx)
    implementation(Kotlin.kotlin_reflect)
    // firebase
    implementation(Firebase.firebase_Messaging)
    implementation(Firebase.firebase_Core)
    //Androidx
    implementation(Androidx.appcompat)
    implementation(Androidx.fragment)
    implementation(Androidx.cardview)
    implementation(Androidx.recyclerview)
    implementation(Androidx.multidex)
    implementation(Androidx.legacy)
    kapt(Androidx.appcompat)
    implementation(Androidx.lifecycle_reactivestreams)
    implementation(Androidx.ifecycle_reactivestreams)
    implementation(Androidx.lifecycle_common)
    implementation(Androidx.lifecycle_runtime)
    implementation(Androidx.lifecycle_livedata)
    implementation(Androidx.constraintlayout)
    implementation(Androidx.navigation_fragment)
    implementation(Androidx.navigation_ui)
    implementation(Androidx.lifecycle_viewmodel)
    //Room
    implementation(Androidx.room_runtime)
    implementation(Androidx.room_ktx)
    kapt(Androidx.room_compiler_kapt)
    //Retrofit
    implementation(Retrofit.retrofit2)
    implementation(Retrofit.okhttp3)
    implementation(Retrofit.converter_gson)
    implementation(Retrofit.logging_interceptor)
    //Gson
    implementation(Gson.gson)
    //Coroutines
    implementation(Coroutines.core)
    implementation(Coroutines.android)
    // sharedPreference
    implementation(SharedPreference.hawk)
    //Hilt
    implementation(Hilt.hilt_android)
    implementation(Hilt.viewmodel)
    kapt(Hilt.kapt_hilt_android)
    kapt(Hilt.kapt_hilt_compiler)

    // Local Unit Tests
    implementation(TestLib.androidxTestCore)
    testImplementation(TestLib.junit)
    testImplementation(TestLib.androidxTestCoreKtx)
    testImplementation(TestLib.hamcrest)
    testImplementation(TestLib.core_testing)
    testImplementation(TestLib.robolectric)
    testImplementation(TestLib.truth)
    testImplementation(TestLib.mockito_core)
    testImplementation(TestLib.coroutinesTest)

    // Instrumented Unit Tests
    androidTestImplementation(TestLib.junit)
    androidTestImplementation(TestLib.mockito_dexmaker)
    androidTestImplementation(TestLib.coroutinesTest)
    androidTestImplementation(TestLib.core_testing)
    androidTestImplementation(TestLib.truth)
    androidTestImplementation(TestLib.testExt)
    androidTestImplementation(TestLib.espresso_core)
    androidTestImplementation(TestLib.mockito_core)
    androidTestImplementation(TestLib.hilt_testing)
    androidTestImplementation(TestLib.espresso_contrib)
    debugImplementation(TestLib.fragmentTesting)
    kaptAndroidTest(Hilt.kapt_hilt_android)
}
apply plugin: 'com.google.gms.google-services'
